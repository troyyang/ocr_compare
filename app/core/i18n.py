from requests import Request
import gettext
from pathlib import Path


class TranslationWrapper:
    _instance = None

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
            cls._instance.lang = "en_US"  # Default language
            cls._instance.init_translation()
        return cls._instance

    def init_translation(self):
        locales_dir = Path(__file__).parent.parent / "translations"
        try:
            self.translations = gettext.translation(
                "messages",
                localedir=locales_dir,
                languages=[self.lang],
                fallback=True
            )
        except Exception as e:
            print(f"Failed to load translations for {self.lang}: {e}")
            self.translations = gettext.NullTranslations()

    def gettext(self, message: str) -> str:
        return self.translations.gettext(message)

    @property
    def lang(self):
        return self._lang

    @lang.setter
    def lang(self, value):
        self._lang = value.replace("-", "_")
        self.init_translation()  # Re-initialize translations


def _(message: str) -> str:
    return TranslationWrapper().gettext(message)

def get_locale() -> str:
    return TranslationWrapper().lang


def set_locale(lang: str = "en_US"):
    translation_wrapper = TranslationWrapper()
    if translation_wrapper.lang != lang:
        translation_wrapper.lang = lang

async def set_locale_from_request(request: Request):
    lang = request.headers.get("Accept-Language", "en_US")
    set_locale(lang)


from starlette.middleware.base import BaseHTTPMiddleware
class LanguageMiddleware(BaseHTTPMiddleware):
    """
    Middleware for setting the language based on the
    request headers.

    This middleware sets the language of the application
    based on the Accept-Language header in the incoming
    request. It uses the set_locale function from the i18n
    module to determine the appropriate language for the request.

    Attributes:
        None
    """

    async def dispatch(self, request: Request, call_next):
        """
        Dispatch method to set the language for the request.

        This method intercepts incoming requests, sets the
        language based on the Accept-Language header, and then
        passes the request to the next middleware or route handler.

        Args:
            request (Request): The incoming request.
            call_next (Callable): The function to call to proceed
            to the next middleware or route handler.

        Returns:
            Response: The response generated by the next middleware
            or route handler.
        """
        await set_locale_from_request(request)  # Set the language for the request
        response = await call_next(
            request
        )  # Proceed to the next middleware or route handler
        return response